// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jacktantram/payments-api/build/go/rpc/paymentprocessor/v1 (interfaces: PaymentProcessorClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/jacktantram/payments-api/build/go/rpc/paymentprocessor/v1"
	grpc "google.golang.org/grpc"
)

// MockPaymentProcessorClient is a mock of PaymentProcessorClient interface.
type MockPaymentProcessorClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProcessorClientMockRecorder
}

// MockPaymentProcessorClientMockRecorder is the mock recorder for MockPaymentProcessorClient.
type MockPaymentProcessorClientMockRecorder struct {
	mock *MockPaymentProcessorClient
}

// NewMockPaymentProcessorClient creates a new mock instance.
func NewMockPaymentProcessorClient(ctrl *gomock.Controller) *MockPaymentProcessorClient {
	mock := &MockPaymentProcessorClient{ctrl: ctrl}
	mock.recorder = &MockPaymentProcessorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentProcessorClient) EXPECT() *MockPaymentProcessorClientMockRecorder {
	return m.recorder
}

// Capture mocks base method.
func (m *MockPaymentProcessorClient) Capture(arg0 context.Context, arg1 *v1.CreateCaptureRequest, arg2 ...grpc.CallOption) (*v1.CreateCaptureResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Capture", varargs...)
	ret0, _ := ret[0].(*v1.CreateCaptureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture.
func (mr *MockPaymentProcessorClientMockRecorder) Capture(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockPaymentProcessorClient)(nil).Capture), varargs...)
}

// CreatePayment mocks base method.
func (m *MockPaymentProcessorClient) CreatePayment(arg0 context.Context, arg1 *v1.CreatePaymentRequest, arg2 ...grpc.CallOption) (*v1.CreatePaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePayment", varargs...)
	ret0, _ := ret[0].(*v1.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentProcessorClientMockRecorder) CreatePayment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentProcessorClient)(nil).CreatePayment), varargs...)
}

// GetPayment mocks base method.
func (m *MockPaymentProcessorClient) GetPayment(arg0 context.Context, arg1 *v1.GetPaymentRequest, arg2 ...grpc.CallOption) (*v1.GetPaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPayment", varargs...)
	ret0, _ := ret[0].(*v1.GetPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockPaymentProcessorClientMockRecorder) GetPayment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockPaymentProcessorClient)(nil).GetPayment), varargs...)
}

// ListPaymentActions mocks base method.
func (m *MockPaymentProcessorClient) ListPaymentActions(arg0 context.Context, arg1 *v1.ListPaymentActionsRequest, arg2 ...grpc.CallOption) (*v1.ListPaymentActionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPaymentActions", varargs...)
	ret0, _ := ret[0].(*v1.ListPaymentActionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentActions indicates an expected call of ListPaymentActions.
func (mr *MockPaymentProcessorClientMockRecorder) ListPaymentActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentActions", reflect.TypeOf((*MockPaymentProcessorClient)(nil).ListPaymentActions), varargs...)
}

// Refund mocks base method.
func (m *MockPaymentProcessorClient) Refund(arg0 context.Context, arg1 *v1.CreateRefundRequest, arg2 ...grpc.CallOption) (*v1.CreateRefundResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Refund", varargs...)
	ret0, _ := ret[0].(*v1.CreateRefundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refund indicates an expected call of Refund.
func (mr *MockPaymentProcessorClientMockRecorder) Refund(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockPaymentProcessorClient)(nil).Refund), varargs...)
}

// Void mocks base method.
func (m *MockPaymentProcessorClient) Void(arg0 context.Context, arg1 *v1.CreateVoidRequest, arg2 ...grpc.CallOption) (*v1.CreateVoidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Void", varargs...)
	ret0, _ := ret[0].(*v1.CreateVoidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Void indicates an expected call of Void.
func (mr *MockPaymentProcessorClientMockRecorder) Void(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Void", reflect.TypeOf((*MockPaymentProcessorClient)(nil).Void), varargs...)
}
