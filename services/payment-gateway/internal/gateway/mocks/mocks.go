// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/jacktantram/payments-api/build/go/shared/payment/v1"
	domain "github.com/jacktantram/payments-api/services/payment-gateway/internal/domain"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockStore) CreatePayment(ctx context.Context, payment *v1.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStoreMockRecorder) CreatePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStore)(nil).CreatePayment), ctx, payment)
}

// CreatePaymentAction mocks base method.
func (m *MockStore) CreatePaymentAction(ctx context.Context, action *v1.PaymentAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentAction", ctx, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePaymentAction indicates an expected call of CreatePaymentAction.
func (mr *MockStoreMockRecorder) CreatePaymentAction(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentAction", reflect.TypeOf((*MockStore)(nil).CreatePaymentAction), ctx, action)
}

// ExecInTransaction mocks base method.
func (m *MockStore) ExecInTransaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecInTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecInTransaction indicates an expected call of ExecInTransaction.
func (mr *MockStoreMockRecorder) ExecInTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecInTransaction", reflect.TypeOf((*MockStore)(nil).ExecInTransaction), ctx, fn)
}

// GetPayment mocks base method.
func (m *MockStore) GetPayment(ctx context.Context, id string) (*v1.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, id)
	ret0, _ := ret[0].(*v1.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockStoreMockRecorder) GetPayment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockStore)(nil).GetPayment), ctx, id)
}

// ListPaymentActions mocks base method.
func (m *MockStore) ListPaymentActions(ctx context.Context, filters *domain.ListPaymentActionFilters) ([]*v1.PaymentAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentActions", ctx, filters)
	ret0, _ := ret[0].([]*v1.PaymentAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentActions indicates an expected call of ListPaymentActions.
func (mr *MockStoreMockRecorder) ListPaymentActions(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentActions", reflect.TypeOf((*MockStore)(nil).ListPaymentActions), ctx, filters)
}

// UpdatePayment mocks base method.
func (m *MockStore) UpdatePayment(ctx context.Context, payment *v1.Payment, fields ...domain.UpdatePaymentField) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, payment}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePayment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockStoreMockRecorder) UpdatePayment(ctx, payment interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, payment}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockStore)(nil).UpdatePayment), varargs...)
}

// UpdatePaymentAction mocks base method.
func (m *MockStore) UpdatePaymentAction(ctx context.Context, action *v1.PaymentAction, fields ...domain.UpdatePaymentActionField) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, action}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePaymentAction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentAction indicates an expected call of UpdatePaymentAction.
func (mr *MockStoreMockRecorder) UpdatePaymentAction(ctx, action interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, action}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentAction", reflect.TypeOf((*MockStore)(nil).UpdatePaymentAction), varargs...)
}

// MockIssuerGateway is a mock of IssuerGateway interface.
type MockIssuerGateway struct {
	ctrl     *gomock.Controller
	recorder *MockIssuerGatewayMockRecorder
}

// MockIssuerGatewayMockRecorder is the mock recorder for MockIssuerGateway.
type MockIssuerGatewayMockRecorder struct {
	mock *MockIssuerGateway
}

// NewMockIssuerGateway creates a new mock instance.
func NewMockIssuerGateway(ctrl *gomock.Controller) *MockIssuerGateway {
	mock := &MockIssuerGateway{ctrl: ctrl}
	mock.recorder = &MockIssuerGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuerGateway) EXPECT() *MockIssuerGatewayMockRecorder {
	return m.recorder
}

// CreateIssuerRequest mocks base method.
func (m *MockIssuerGateway) CreateIssuerRequest(ctx context.Context, issuerRequest domain.IssuerRequest) (domain.IssuerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssuerRequest", ctx, issuerRequest)
	ret0, _ := ret[0].(domain.IssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssuerRequest indicates an expected call of CreateIssuerRequest.
func (mr *MockIssuerGatewayMockRecorder) CreateIssuerRequest(ctx, issuerRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuerRequest", reflect.TypeOf((*MockIssuerGateway)(nil).CreateIssuerRequest), ctx, issuerRequest)
}
