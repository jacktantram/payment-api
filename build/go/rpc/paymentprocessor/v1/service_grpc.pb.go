// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentProcessorClient is the client API for PaymentProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentProcessorClient interface {
	// Responsible for creating an authorization on a specified payment method.
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	// Will capture an existing payment.
	Capture(ctx context.Context, in *CreateCaptureRequest, opts ...grpc.CallOption) (*CreateCaptureResponse, error)
	// Will refund an existing payment.
	Refund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error)
	// Will void an existing payment.
	Void(ctx context.Context, in *CreateVoidRequest, opts ...grpc.CallOption) (*CreateVoidResponse, error)
	// Provides ability to get by payment id.
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	// Provides ability to list payment actions.
	ListPaymentActions(ctx context.Context, in *ListPaymentActionsRequest, opts ...grpc.CallOption) (*ListPaymentActionsResponse, error)
}

type paymentProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentProcessorClient(cc grpc.ClientConnInterface) PaymentProcessorClient {
	return &paymentProcessorClient{cc}
}

func (c *paymentProcessorClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, "/rpc.paymentprocessor.v1.PaymentProcessor/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentProcessorClient) Capture(ctx context.Context, in *CreateCaptureRequest, opts ...grpc.CallOption) (*CreateCaptureResponse, error) {
	out := new(CreateCaptureResponse)
	err := c.cc.Invoke(ctx, "/rpc.paymentprocessor.v1.PaymentProcessor/Capture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentProcessorClient) Refund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error) {
	out := new(CreateRefundResponse)
	err := c.cc.Invoke(ctx, "/rpc.paymentprocessor.v1.PaymentProcessor/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentProcessorClient) Void(ctx context.Context, in *CreateVoidRequest, opts ...grpc.CallOption) (*CreateVoidResponse, error) {
	out := new(CreateVoidResponse)
	err := c.cc.Invoke(ctx, "/rpc.paymentprocessor.v1.PaymentProcessor/Void", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentProcessorClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, "/rpc.paymentprocessor.v1.PaymentProcessor/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentProcessorClient) ListPaymentActions(ctx context.Context, in *ListPaymentActionsRequest, opts ...grpc.CallOption) (*ListPaymentActionsResponse, error) {
	out := new(ListPaymentActionsResponse)
	err := c.cc.Invoke(ctx, "/rpc.paymentprocessor.v1.PaymentProcessor/ListPaymentActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentProcessorServer is the server API for PaymentProcessor service.
// All implementations must embed UnimplementedPaymentProcessorServer
// for forward compatibility
type PaymentProcessorServer interface {
	// Responsible for creating an authorization on a specified payment method.
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	// Will capture an existing payment.
	Capture(context.Context, *CreateCaptureRequest) (*CreateCaptureResponse, error)
	// Will refund an existing payment.
	Refund(context.Context, *CreateRefundRequest) (*CreateRefundResponse, error)
	// Will void an existing payment.
	Void(context.Context, *CreateVoidRequest) (*CreateVoidResponse, error)
	// Provides ability to get by payment id.
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	// Provides ability to list payment actions.
	ListPaymentActions(context.Context, *ListPaymentActionsRequest) (*ListPaymentActionsResponse, error)
	mustEmbedUnimplementedPaymentProcessorServer()
}

// UnimplementedPaymentProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentProcessorServer struct {
}

func (UnimplementedPaymentProcessorServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentProcessorServer) Capture(context.Context, *CreateCaptureRequest) (*CreateCaptureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedPaymentProcessorServer) Refund(context.Context, *CreateRefundRequest) (*CreateRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedPaymentProcessorServer) Void(context.Context, *CreateVoidRequest) (*CreateVoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Void not implemented")
}
func (UnimplementedPaymentProcessorServer) GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedPaymentProcessorServer) ListPaymentActions(context.Context, *ListPaymentActionsRequest) (*ListPaymentActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentActions not implemented")
}
func (UnimplementedPaymentProcessorServer) mustEmbedUnimplementedPaymentProcessorServer() {}

// UnsafePaymentProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentProcessorServer will
// result in compilation errors.
type UnsafePaymentProcessorServer interface {
	mustEmbedUnimplementedPaymentProcessorServer()
}

func RegisterPaymentProcessorServer(s grpc.ServiceRegistrar, srv PaymentProcessorServer) {
	s.RegisterService(&PaymentProcessor_ServiceDesc, srv)
}

func _PaymentProcessor_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessorServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.paymentprocessor.v1.PaymentProcessor/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessorServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentProcessor_Capture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessorServer).Capture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.paymentprocessor.v1.PaymentProcessor/Capture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessorServer).Capture(ctx, req.(*CreateCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentProcessor_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessorServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.paymentprocessor.v1.PaymentProcessor/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessorServer).Refund(ctx, req.(*CreateRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentProcessor_Void_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessorServer).Void(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.paymentprocessor.v1.PaymentProcessor/Void",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessorServer).Void(ctx, req.(*CreateVoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentProcessor_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessorServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.paymentprocessor.v1.PaymentProcessor/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessorServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentProcessor_ListPaymentActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessorServer).ListPaymentActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.paymentprocessor.v1.PaymentProcessor/ListPaymentActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessorServer).ListPaymentActions(ctx, req.(*ListPaymentActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentProcessor_ServiceDesc is the grpc.ServiceDesc for PaymentProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.paymentprocessor.v1.PaymentProcessor",
	HandlerType: (*PaymentProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentProcessor_CreatePayment_Handler,
		},
		{
			MethodName: "Capture",
			Handler:    _PaymentProcessor_Capture_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _PaymentProcessor_Refund_Handler,
		},
		{
			MethodName: "Void",
			Handler:    _PaymentProcessor_Void_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentProcessor_GetPayment_Handler,
		},
		{
			MethodName: "ListPaymentActions",
			Handler:    _PaymentProcessor_ListPaymentActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/paymentprocessor/v1/service.proto",
}
